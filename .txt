To build a full-functional calculator that meets your requirements, you’ll need to integrate several features into the calculator. Here's a step-by-step guide to achieve this:

### 1. **HTML Structure for Calculator**

Update your `calculator.html` with a more structured layout:

```html
```

### 2. **JavaScript Functionality**

Update your `calculator.js` with the following:

```javascript
```

### 3. **Backend Endpoints**

Make sure you have the following endpoints in your backend:

- **GET `/api/categories`**: Returns a list of product categories.
- **GET `/api/sizes`**: Returns a list of product sizes.
- **POST `/api/products`**: Handles adding or updating product details.

### 4. **Styling**

You can add CSS to `styles.css` to make the form look better. For example:

```css
body {
    font-family: Arial, sans-serif;
    padding: 20px;
}

form {
    max-width: 600px;
    margin: auto;
}

label {
    display: block;
    margin: 10px 0 5px;
}

input, select, button {
    margin-bottom: 10px;
}

button {
    margin-right: 5px;
}
```

### 5. **Integration with Dashboards**

Ensure that the `calculator.html` is accessible via the admin and cashier dashboards. You can add a link to it from those dashboards or implement routing to display it as a section/page.

### 6. **Testing and Deployment**

- Test the functionality thoroughly.
- Ensure that data is correctly fetched and updated.
- Deploy changes and ensure the calculator works seamlessly with your existing systems.

By following these steps, you’ll have a fully functional calculator capable of performing mathematical operations, updating product details, and interacting with your APIs.